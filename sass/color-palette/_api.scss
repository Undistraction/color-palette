////
/// @author Pedr Browne
/// @access public
/// @group API
////

///
/// A map containing color values
///
$color-palette-map: () !default;

// API
// -------------------------------------------------------------------------------------------------

/// Lookup a colour value using a key or set of keys
///
/// @param {ArgList} $path
///   A key or list of keys mapping to a colour stored in the `$color-palette-map`.
///
/// @returns {Color}
///   A Color value.
///
/// @throws
///   $cp-missing-color-error
///
@function color-palette($path...) {
  $list: null;

  // Handle lists so that they can be passed aswell as separate arguments
  $first-argument: nth($path, 1);
  @if type-of($first-argument) == list {
    $list: $first-argument;
  } @else {
    $list: $path;
  }

  // Handle cases where a single key is passed - if the key's value is a map, delegate to its `base` value
  @if length($list) == 1 {
    $root-value: map-get($color-palette-map, $list...);
    @if type-of($root-value) == map {
      $list: append($list, base);
    }@else if $root-value {
      @return $root-value;
    }
  }

  $value: map-get-deep($color-palette-map, $list);
  @if $value {
    @return $value;
  } @else {
    @return map-get-deep($color-palette-map, cp-parse-value-filter($list...));
  }
}

///
/// A convenience function that calls `palette`.
/// @see palette
///
@function cp($path...) {
  @return color-palette($path...)
}
